# Top-level rule: a definition is a collection of lines, the collection may be empty.
# Lines may contain at most one statement, possibly followed by whitespaces, possibly followed by a comment.
# Lines are terminated by an ASCII LF (Unix) or CRLF (Windows) sequence.
definition  = line*                                 # An empty file is a valid definition.
line        = statement? _? comment? end_of_line    # End-of-line after the last statement is mandatory.
comment     = ~r"#[^\r\n]*"
end_of_line = ~r"\r?\n"                             # Unix/Windows
_           = ~r"[ \t]+"                            # Whitespace

# Possible kinds of statements.
statement   = directive / service_response_marker / attribute
attribute   = constant / field / padding_field

# Fields and constants are main elements of a data type definition.
constant      = attribute_type _ name_component _? "=" _? expression
field         = attribute_type _ name_component
padding_field = ~r"void[1-9]\d*"

# Type reference as used in attribute declarations.
attribute_type = (cast_mode _)? type_name (_? array_declarator)?

cast_mode           = cast_mode_saturated / cast_mode_truncated
cast_mode_saturated = "saturated"
cast_mode_truncated = "truncated"

# The capacity specification expression must yield a positive integer.
array_declarator = "[" _? (array_variable_length_boundary _?)? expression _? "]"

array_variable_length_boundary = array_variable_length_boundary_inclusive / array_variable_length_boundary_exclusive
array_variable_length_boundary_inclusive = "<="  # Specified first because the other option shares same prefix.
array_variable_length_boundary_exclusive = "<"

type_name          = compound_type_name / builtin_type_name
compound_type_name = composite_name "." type_version
builtin_type_name  = name_component                         # Built-in types are not versioned.
type_version       = decimal_integer "." decimal_integer

composite_name = name_component ("." name_component)*
name_component = ~r"[a-zA-Z_][a-zA-Z0-9_]*"

# Separates service request from service response, and also specifies that the current definition is of a service kind.
service_response_marker = "---"

# Directives may have an expression, depending on their semantics.
# The expression must yield a type that is expected by the directive.
directive = "@" name_component (_ expression)?

# The rest of the rules is used to define expressions. The aliasing is added for clarity.
# Since DSDL definitions cannot be used to describe runtime logic, all expressions are constant expressions,
# evaluated at the time of parsing.
expression      = ex_logical
expression_list = expression (_? "," _? expression)*

# An atom is a basic part of an expression, such as literals or attributes (local or external)
atom = set / parenthetical / literal / identifier

# Reference to an attribute (local or external), type, etc.
identifier = name_component ("." (name_component / type_version))*

# A set is a notation used to represent mathematical sets.
# Empty sets are currently not allowed.
set = "{" _? expression_list _? "}"

# Parenthetical expressions are used for managing precedence.
parenthetical = "(" _? expression _? ")"

# Operators. The precedence relations are expressed in the rules; the order here is from lower to higher.
# Operators that share common prefix (e.g. < and <=, // and /, and so on) are arranged so that the longest form
# comes first; otherwise it would be unreachable.
ex_logical        = ex_logical_not    (_? op2_log _? ex_logical_not)*
ex_logical_not    = op1_form_log_not / ex_comparison
ex_comparison     = ex_bitwise        (_? op2_cmp _? ex_bitwise)*
ex_bitwise        = ex_additive       (_? op2_bit _? ex_additive)*
ex_additive       = ex_multiplicative (_? op2_add _? ex_multiplicative)*
ex_multiplicative = ex_inversion      (_? op2_mul _? ex_inversion)*
ex_inversion      = op1_form_inv_pos / op1_form_inv_neg / ex_exponential
ex_exponential    = atom              (_? op2_exp _? ex_inversion)?     # Right recursion

# Unary operator forms are moved into separate rules for ease of parsing.
op1_form_log_not = "!" _? ex_logical_not    # Right recursion
op1_form_inv_pos = "+" _? ex_exponential
op1_form_inv_neg = "-" _? ex_exponential

# List of binary operators.
op2_log = op2_log_or / op2_log_and
op2_log_or  = "||"
op2_log_and = "&&"

op2_cmp = op2_cmp_equ / op2_cmp_geq / op2_cmp_leq / op2_cmp_neq / op2_cmp_lss / op2_cmp_grt  # Ordering is important.
op2_cmp_equ = "=="
op2_cmp_neq = "!="
op2_cmp_leq = "<="
op2_cmp_geq = ">="
op2_cmp_lss = "<"
op2_cmp_grt = ">"

op2_bit = op2_bit_or / op2_bit_xor / op2_bit_and
op2_bit_or  = "|"
op2_bit_xor = "^"
op2_bit_and = "&"

op2_add = op2_add_add / op2_add_sub
op2_add_add = "+"
op2_add_sub = "-"

op2_mul = op2_mul_mul / op2_mul_fdv / op2_mul_div / op2_mul_mod  # Ordering is important.
op2_mul_mul = "*"
op2_mul_fdv = "//"
op2_mul_div = "/"
op2_mul_mod = "%"

op2_exp = op2_exp_pow
op2_exp_pow = "**"

# Literals. Reals are defined first to avoid ambiguities.
literal = real / integer / string / boolean

# Integers.
integer             = binary_integer / octal_integer / hexadecimal_integer / decimal_integer
binary_integer      = ~r"0[bB](_?(0|1))+"
octal_integer       = ~r"0[oO](_?[0-7])+"
hexadecimal_integer = ~r"0[xX](_?[0-9a-fA-F])+"
decimal_integer     = ~r"(0(_?0)*)+|([1-9](_?[0-9])*)"

# Reals (floats). Exponent notation is defined first to avoid ambiguities.
real                   = exponent_notation_real / point_notation_real
exponent_notation_real = (point_notation_real / real_digits) real_exponent
point_notation_real    = (real_digits? real_fraction) / (real_digits ".")
real_fraction          = "." real_digits
real_exponent          = ~r"[eE][+-]?" real_digits
real_digits            = ~r"[0-9](_?[0-9])*"

# String literals.
string               = single_quoted_string / double_quoted_string
single_quoted_string = ~r"'[^'\\]*(\\[^\r\n][^'\\]*)*'"
double_quoted_string = ~r'"[^"\\]*(\\[^\r\n][^"\\]*)*"'

# Boolean literals.
boolean = boolean_true / boolean_false
boolean_true  = "true"
boolean_false = "false"
